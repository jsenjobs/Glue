package app.chaosstudio.com.glue.greendb.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import app.chaosstudio.com.glue.greendb.model.DownloadMode;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DOWNLOAD_MODE".
*/
public class DownloadModeDao extends AbstractDao<DownloadMode, Long> {

    public static final String TABLENAME = "DOWNLOAD_MODE";

    /**
     * Properties of entity DownloadMode.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Url = new Property(1, String.class, "url", false, "URL");
        public final static Property Time = new Property(2, long.class, "time", false, "TIME");
        public final static Property Size = new Property(3, long.class, "size", false, "SIZE");
        public final static Property IsFinished = new Property(4, boolean.class, "isFinished", false, "IS_FINISHED");
        public final static Property Path = new Property(5, String.class, "path", false, "PATH");
    }


    public DownloadModeDao(DaoConfig config) {
        super(config);
    }
    
    public DownloadModeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DOWNLOAD_MODE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"URL\" TEXT," + // 1: url
                "\"TIME\" INTEGER NOT NULL ," + // 2: time
                "\"SIZE\" INTEGER NOT NULL ," + // 3: size
                "\"IS_FINISHED\" INTEGER NOT NULL ," + // 4: isFinished
                "\"PATH\" TEXT);"); // 5: path
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DOWNLOAD_MODE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DownloadMode entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(2, url);
        }
        stmt.bindLong(3, entity.getTime());
        stmt.bindLong(4, entity.getSize());
        stmt.bindLong(5, entity.getIsFinished() ? 1L: 0L);
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(6, path);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DownloadMode entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(2, url);
        }
        stmt.bindLong(3, entity.getTime());
        stmt.bindLong(4, entity.getSize());
        stmt.bindLong(5, entity.getIsFinished() ? 1L: 0L);
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(6, path);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DownloadMode readEntity(Cursor cursor, int offset) {
        DownloadMode entity = new DownloadMode( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // url
            cursor.getLong(offset + 2), // time
            cursor.getLong(offset + 3), // size
            cursor.getShort(offset + 4) != 0, // isFinished
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // path
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DownloadMode entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUrl(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTime(cursor.getLong(offset + 2));
        entity.setSize(cursor.getLong(offset + 3));
        entity.setIsFinished(cursor.getShort(offset + 4) != 0);
        entity.setPath(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DownloadMode entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DownloadMode entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DownloadMode entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
