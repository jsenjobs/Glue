package app.chaosstudio.com.glue.greendb.gen;

import java.util.Map;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.AbstractDaoSession;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.identityscope.IdentityScopeType;
import org.greenrobot.greendao.internal.DaoConfig;

import app.chaosstudio.com.glue.greendb.model.BlackUrl;
import app.chaosstudio.com.glue.greendb.model.BookMark;
import app.chaosstudio.com.glue.greendb.model.DownloadMode;
import app.chaosstudio.com.glue.greendb.model.History;
import app.chaosstudio.com.glue.greendb.model.JsDomain;
import app.chaosstudio.com.glue.greendb.model.LogMode;
import app.chaosstudio.com.glue.greendb.model.OpendedUrl;
import app.chaosstudio.com.glue.greendb.model.PageSource;
import app.chaosstudio.com.glue.greendb.model.PlayList;
import app.chaosstudio.com.glue.greendb.model.Plugin;
import app.chaosstudio.com.glue.greendb.model.Record;
import app.chaosstudio.com.glue.greendb.model.WhiteDomain;

import app.chaosstudio.com.glue.greendb.gen.BlackUrlDao;
import app.chaosstudio.com.glue.greendb.gen.BookMarkDao;
import app.chaosstudio.com.glue.greendb.gen.DownloadModeDao;
import app.chaosstudio.com.glue.greendb.gen.HistoryDao;
import app.chaosstudio.com.glue.greendb.gen.JsDomainDao;
import app.chaosstudio.com.glue.greendb.gen.LogModeDao;
import app.chaosstudio.com.glue.greendb.gen.OpendedUrlDao;
import app.chaosstudio.com.glue.greendb.gen.PageSourceDao;
import app.chaosstudio.com.glue.greendb.gen.PlayListDao;
import app.chaosstudio.com.glue.greendb.gen.PluginDao;
import app.chaosstudio.com.glue.greendb.gen.RecordDao;
import app.chaosstudio.com.glue.greendb.gen.WhiteDomainDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 * 
 * @see org.greenrobot.greendao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig blackUrlDaoConfig;
    private final DaoConfig bookMarkDaoConfig;
    private final DaoConfig downloadModeDaoConfig;
    private final DaoConfig historyDaoConfig;
    private final DaoConfig jsDomainDaoConfig;
    private final DaoConfig logModeDaoConfig;
    private final DaoConfig opendedUrlDaoConfig;
    private final DaoConfig pageSourceDaoConfig;
    private final DaoConfig playListDaoConfig;
    private final DaoConfig pluginDaoConfig;
    private final DaoConfig recordDaoConfig;
    private final DaoConfig whiteDomainDaoConfig;

    private final BlackUrlDao blackUrlDao;
    private final BookMarkDao bookMarkDao;
    private final DownloadModeDao downloadModeDao;
    private final HistoryDao historyDao;
    private final JsDomainDao jsDomainDao;
    private final LogModeDao logModeDao;
    private final OpendedUrlDao opendedUrlDao;
    private final PageSourceDao pageSourceDao;
    private final PlayListDao playListDao;
    private final PluginDao pluginDao;
    private final RecordDao recordDao;
    private final WhiteDomainDao whiteDomainDao;

    public DaoSession(Database db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        blackUrlDaoConfig = daoConfigMap.get(BlackUrlDao.class).clone();
        blackUrlDaoConfig.initIdentityScope(type);

        bookMarkDaoConfig = daoConfigMap.get(BookMarkDao.class).clone();
        bookMarkDaoConfig.initIdentityScope(type);

        downloadModeDaoConfig = daoConfigMap.get(DownloadModeDao.class).clone();
        downloadModeDaoConfig.initIdentityScope(type);

        historyDaoConfig = daoConfigMap.get(HistoryDao.class).clone();
        historyDaoConfig.initIdentityScope(type);

        jsDomainDaoConfig = daoConfigMap.get(JsDomainDao.class).clone();
        jsDomainDaoConfig.initIdentityScope(type);

        logModeDaoConfig = daoConfigMap.get(LogModeDao.class).clone();
        logModeDaoConfig.initIdentityScope(type);

        opendedUrlDaoConfig = daoConfigMap.get(OpendedUrlDao.class).clone();
        opendedUrlDaoConfig.initIdentityScope(type);

        pageSourceDaoConfig = daoConfigMap.get(PageSourceDao.class).clone();
        pageSourceDaoConfig.initIdentityScope(type);

        playListDaoConfig = daoConfigMap.get(PlayListDao.class).clone();
        playListDaoConfig.initIdentityScope(type);

        pluginDaoConfig = daoConfigMap.get(PluginDao.class).clone();
        pluginDaoConfig.initIdentityScope(type);

        recordDaoConfig = daoConfigMap.get(RecordDao.class).clone();
        recordDaoConfig.initIdentityScope(type);

        whiteDomainDaoConfig = daoConfigMap.get(WhiteDomainDao.class).clone();
        whiteDomainDaoConfig.initIdentityScope(type);

        blackUrlDao = new BlackUrlDao(blackUrlDaoConfig, this);
        bookMarkDao = new BookMarkDao(bookMarkDaoConfig, this);
        downloadModeDao = new DownloadModeDao(downloadModeDaoConfig, this);
        historyDao = new HistoryDao(historyDaoConfig, this);
        jsDomainDao = new JsDomainDao(jsDomainDaoConfig, this);
        logModeDao = new LogModeDao(logModeDaoConfig, this);
        opendedUrlDao = new OpendedUrlDao(opendedUrlDaoConfig, this);
        pageSourceDao = new PageSourceDao(pageSourceDaoConfig, this);
        playListDao = new PlayListDao(playListDaoConfig, this);
        pluginDao = new PluginDao(pluginDaoConfig, this);
        recordDao = new RecordDao(recordDaoConfig, this);
        whiteDomainDao = new WhiteDomainDao(whiteDomainDaoConfig, this);

        registerDao(BlackUrl.class, blackUrlDao);
        registerDao(BookMark.class, bookMarkDao);
        registerDao(DownloadMode.class, downloadModeDao);
        registerDao(History.class, historyDao);
        registerDao(JsDomain.class, jsDomainDao);
        registerDao(LogMode.class, logModeDao);
        registerDao(OpendedUrl.class, opendedUrlDao);
        registerDao(PageSource.class, pageSourceDao);
        registerDao(PlayList.class, playListDao);
        registerDao(Plugin.class, pluginDao);
        registerDao(Record.class, recordDao);
        registerDao(WhiteDomain.class, whiteDomainDao);
    }
    
    public void clear() {
        blackUrlDaoConfig.clearIdentityScope();
        bookMarkDaoConfig.clearIdentityScope();
        downloadModeDaoConfig.clearIdentityScope();
        historyDaoConfig.clearIdentityScope();
        jsDomainDaoConfig.clearIdentityScope();
        logModeDaoConfig.clearIdentityScope();
        opendedUrlDaoConfig.clearIdentityScope();
        pageSourceDaoConfig.clearIdentityScope();
        playListDaoConfig.clearIdentityScope();
        pluginDaoConfig.clearIdentityScope();
        recordDaoConfig.clearIdentityScope();
        whiteDomainDaoConfig.clearIdentityScope();
    }

    public BlackUrlDao getBlackUrlDao() {
        return blackUrlDao;
    }

    public BookMarkDao getBookMarkDao() {
        return bookMarkDao;
    }

    public DownloadModeDao getDownloadModeDao() {
        return downloadModeDao;
    }

    public HistoryDao getHistoryDao() {
        return historyDao;
    }

    public JsDomainDao getJsDomainDao() {
        return jsDomainDao;
    }

    public LogModeDao getLogModeDao() {
        return logModeDao;
    }

    public OpendedUrlDao getOpendedUrlDao() {
        return opendedUrlDao;
    }

    public PageSourceDao getPageSourceDao() {
        return pageSourceDao;
    }

    public PlayListDao getPlayListDao() {
        return playListDao;
    }

    public PluginDao getPluginDao() {
        return pluginDao;
    }

    public RecordDao getRecordDao() {
        return recordDao;
    }

    public WhiteDomainDao getWhiteDomainDao() {
        return whiteDomainDao;
    }

}
